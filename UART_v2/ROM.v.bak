module ROM (
    input wire clk,
    input wire load_en,
    input wire [5:0] addr,
    output reg [7:0] data_out
);

    reg [7:0] mem [51:0]; // 52 registers, each 8 bits wide

    // Initialize memory with ASCII values for 'a' to 'z' and 'A' to 'Z'
    initial begin
        mem[0]  = 8'h61; // 'a'
        mem[1]  = 8'h62; // 'b'
        mem[2]  = 8'h63; // 'c'
        mem[3]  = 8'h64; // 'd'
        mem[4]  = 8'h65; // 'e'
        mem[5]  = 8'h66; // 'f'
        mem[6]  = 8'h67; // 'g'
        mem[7]  = 8'h68; // 'h'
        mem[8]  = 8'h69; // 'i'
        mem[9]  = 8'h6A; // 'j'
        mem[10] = 8'h6B; // 'k'
        mem[11] = 8'h6C; // 'l'
        mem[12] = 8'h6D; // 'm'
        mem[13] = 8'h6E; // 'n'
        mem[14] = 8'h6F; // 'o'
        mem[15] = 8'h70; // 'p'
        mem[16] = 8'h71; // 'q'
        mem[17] = 8'h72; // 'r'
        mem[18] = 8'h73; // 's'
        mem[19] = 8'h74; // 't'
        mem[20] = 8'h75; // 'u'
        mem[21] = 8'h76; // 'v'
        mem[22] = 8'h77; // 'w'
        mem[23] = 8'h78; // 'x'
        mem[24] = 8'h79; // 'y'
        mem[25] = 8'h7A; // 'z'
        mem[26] = 8'h41; // 'A'
        mem[27] = 8'h42; // 'B'
        mem[28] = 8'h43; // 'C'
        mem[29] = 8'h44; // 'D'
        mem[30] = 8'h45; // 'E'
        mem[31] = 8'h46; // 'F'
        mem[32] = 8'h47; // 'G'
        mem[33] = 8'h48; // 'H'
        mem[34] = 8'h49; // 'I'
        mem[35] = 8'h4A; // 'J'
        mem[36] = 8'h4B; // 'K'
        mem[37] = 8'h4C; // 'L'
        mem[38] = 8'h4D; // 'M'
        mem[39] = 8'h4E; // 'N'
        mem[40] = 8'h4F; // 'O'
        mem[41] = 8'h50; // 'P'
        mem[42] = 8'h51; // 'Q'
        mem[43] = 8'h52; // 'R'
        mem[44] = 8'h53; // 'S'
        mem[45] = 8'h54; // 'T'
        mem[46] = 8'h55; // 'U'
        mem[47] = 8'h56; // 'V'
        mem[48] = 8'h57; // 'W'
        mem[49] = 8'h58; // 'X'
        mem[50] = 8'h59; // 'Y'
        mem[51] = 8'h5A; // 'Z'
    end

    // Read operation
    always @(posedge clk) begin
        if (load_en) begin
            if (addr >= 0 && addr <= 51) begin
                data_out <= mem[addr];
            end else begin
                data_out <= 8'h00; // default value
            end
        end
    end

endmodule
